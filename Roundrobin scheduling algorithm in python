import random
import statistics


class Process:
    def _init_(self, pid, arrival_time, burst_time):
        self.pid = pid
        self.arrival_time = arrival_time
        self.burst_time = burst_time
        self.remaining_time = burst_time
        self.waiting_time = 0
        self.turnaround_time = 0


def generate_processes(num_processes):
    processes = []
    for i in range(num_processes):
        arrival_time = random.randint(0, 50)
        burst_time = random.randint(1, 20)
        process = Process(i, arrival_time, burst_time)
        processes.append(process)
    return processes


def round_robin(processes, time_quantum, max_time):
    time = 0
    ready_queue = []
    completed_processes = []

    while time < max_time:
        for process in processes:
            if process.arrival_time == time:
                ready_queue.append(process)

        if ready_queue:
            current_process = ready_queue.pop(0)
            current_process.remaining_time -= time_quantum

            for process in ready_queue:
                process.waiting_time += time_quantum

            if current_process.remaining_time <= 0:
                current_process.turnaround_time = time + time_quantum + current_process.remaining_time - current_process.arrival_time
                completed_processes.append(current_process)
            else:
                ready_queue.append(current_process)

        time += time_quantum

    return completed_processes


def run_simulation(num_processes, time_quantum, max_time):
    processes = generate_processes(num_processes)
    completed_processes = round_robin(processes, time_quantum, max_time)

    waiting_times = [process.waiting_time for process in completed_processes]
    turnaround_times = [process.turnaround_time for process in completed_processes]

    avg_waiting_time = statistics.mean(waiting_times)
    avg_turnaround_time = statistics.mean(turnaround_times)

    return avg_waiting_time, avg_turnaround_time


def compare_with_ideal(avg_waiting_time, avg_turnaround_time):
    print("Round Robin Results:")
    print(f"Average waiting time: {avg_waiting_time}")
    print(f"Average turnaround time: {avg_turnaround_time}")

    # Add comparison with an ideal scheduler
    # For example, compare with the Shortest Job Next (SJN) scheduling algorithm


if _name_ == "_main_":
    num_processes = 10
    time_quantum = 4
    max_time = 100

    avg_waiting_time, avg_turnaround_time = run_simulation(num_processes, time_quantum, max_time)
    compare_with_ideal(avg_waiting_time, avg_turnaround_time)
